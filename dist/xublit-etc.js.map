{"version":3,"sources":["../src/xublit-etc.es6"],"names":[],"mappings":";;;;;;;;QAQgB;;;;IANJ;;;;IACA;;;;IACA;;;;;;AAJZ,IAAM,wBAAwB,eAAxB;;AAMC,IAAI,sBAAO,WAAP;AACJ,IAAI,0BAAS,EAAT;AACJ,SAAS,SAAT,GAAsB;;AAEzB,QAAI,UAAU,KAAK,OAAL,IAAgB,EAAhB,CAFW;;AAIzB,QAAI,UAAU,aAAa,OAAb,GAAuB,QAAQ,OAAR,GAAkB,EAAzC,CAJW;AAKzB,QAAI,WAAW,cAAc,OAAd,GAAwB,QAAQ,QAAR,GAAmB,IAA3C,CALU;;QAOnB;AAEF,iBAFE,SAEF,GAAe;kCAFb,WAEa;SAAf;;qBAFE;;2CAcc,aAAa;AACzB,uBAAO,KAAK,YAAL,CAAkB,KAAK,WAAL,CAAiB,WAAjB,CAAlB,CAAP,CADyB;;;;yCAIf,UAAU;;AAEpB,oBAAI,OAAO,GAAG,YAAH,CAAgB,QAAhB,CAAP,CAFgB;;AAIpB,uBAAO,UAAU,KAAK,QAAL,GACb,KAAK,IAAL,CAAU,IAAV,CADG,GAEH,KAAK,QAAL,CAAc,IAAd,CAFG,CAJa;;;;8CAUL,YAAY;;;AAE3B,oBAAI,gBAAgB,KAAK,WAAL,CAAiB,UAAjB,CAAhB,CAFuB;AAG3B,oBAAI,YAAY,GAAG,WAAH,CAAe,aAAf,CAAZ,CAHuB;;AAK3B,oBAAI,UAAU,EAAV,CALuB;;AAO3B,0BAAU,OAAV,CAAkB,UAAC,QAAD,EAAc;;AAE5B,wBAAI,CAAC,sBAAsB,IAAtB,CAA2B,QAA3B,CAAD,EAAuC;AACvC,+BADuC;qBAA3C;;AAIA,wBAAI,WAAW,MAAK,WAAL,CACX,CAAC,UAAD,EAAa,QAAb,EAAuB,IAAvB,CAA4B,KAAK,GAAL,CADjB,CAAX,CANwB;;AAU5B,wBAAI,OAAO,SAAS,OAAT,CAAiB,qBAAjB,EAAwC,EAAxC,CAAP,CAVwB;AAW5B,wBAAI,SAAS,MAAK,YAAL,CAAkB,QAAlB,CAAT,CAXwB;;AAa5B,4BAAQ,IAAR,IAAgB,MAAhB,CAb4B;iBAAd,CAAlB,CAP2B;;AAwB3B,uBAAO,OAAP,CAxB2B;;;;wCA4BlB,aAAa;;AAEtB,oBAAI,KAAK,UAAL,CAAgB,WAAhB,CAAJ,EAAkC;AAC9B,2BAAO,WAAP,CAD8B;iBAAlC;;AAIA,oBAAI,OAAO,KAAK,OAAL,EAAc;AACrB,2BAAO,KAAK,IAAL,CAAU,KAAK,OAAL,EAAc,KAAK,SAAL,CAAe,WAAf,CAAxB,CAAP,CADqB;iBAAzB;;AAIA,uBAAO,KAAK,SAAL,CAAe,WAAf,CAAP,CAVsB;;;;gCAlDV;AACZ,uBAAO,QAAP,CADY;;;;gCAID;AACX,uBAAO,OAAP,CADW;;;;eAVb;QAPmB;;AA+EzB,WAAO,SAAP,CA/EyB;CAAtB","file":"xublit-etc.js","sourcesContent":["const YAML_EXTENSION_REGEXP = /\\.(yml|yaml)$/;\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as yaml from 'js-yaml';\n\nexport var name = 'XublitEtc';\nexport var inject = [];\nexport function bootstrap () {\n\n    var options = this.options || {};\n\n    var etcPath = 'etcPath' in options ? options.etcPath : '';\n    var safeLoad = 'safeLoad' in options ? options.safeLoad : true;\n\n    class XublitEtc {\n\n        constructor () {\n\n        }\n\n        get safeLoad () {\n            return safeLoad;\n        }\n\n        get etcPath () {\n            return etcPath;\n        }\n\n        readConfigSync (etcFilePath) {\n            return this.readFileSync(this.getFullPath(etcFilePath));\n        }\n\n        readFileSync (filePath) {\n\n            var file = fs.readFileSync(filePath);\n\n            return false === this.safeLoad ?\n                yaml.load(file) :\n                yaml.safeLoad(file);\n\n        }\n\n        readConfigDirSync (etcDirPath) {\n\n            var configDirPath = this.getFullPath(etcDirPath);\n            var fileNames = fs.readdirSync(configDirPath);\n\n            var configs = {};\n\n            fileNames.forEach((fileName) => {\n\n                if (!YAML_EXTENSION_REGEXP.test(fileName)) {\n                    return;\n                }\n\n                var filePath = this.getFullPath(\n                    [etcDirPath, fileName].join(path.sep)\n                );\n\n                var name = fileName.replace(YAML_EXTENSION_REGEXP, '');\n                var config = this.readFileSync(filePath);\n\n                configs[name] = config;\n\n            });\n\n            return configs;\n\n        }\n\n        getFullPath (etcFilePath) {\n\n            if (path.isAbsolute(etcFilePath)) {\n                return etcFilePath;\n            }\n\n            if ('' !== this.etcPath) {\n                return path.join(this.etcPath, path.normalize(etcFilePath));\n            }\n\n            return path.normalize(etcFilePath);\n\n        }\n\n    }\n\n    return XublitEtc;\n\n}\n"]}